# -*- coding: utf-8 -*-
"""Heart-attack

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P8qhDNBs8IOF4KMjF4sxsVpxWrLun3-2

<p style="text-align:center; ">
<img src="https://cdn-icons-png.flaticon.com/512/8730/8730487.png" alt="Description of the image" width="100"/>
</p>
<h1 style=" text-align:center; color:Blue; font-size:40px;"> <b>Heart Attack Analysis & Prediction</b> </h1>

#<h3 style="color: green;">Members:</h3> Medyouni Saber - Trabelsi Yassine - Mannai Molka - Haouari Khalil ibrahim - Ouertani Fatma - Chniti Yasser - Bensalah Yassine
<h3 style="color: green;">Teacher:</h3>Jihen Hlel
<h3 style="color: green;">Class:</h3> 4 ERP-BI 1

# Data Preparation

***Importing the required libraries***
"""

import warnings
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

import seaborn as sns
import matplotlib.pylab as plt
# %matplotlib inline

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler

from scipy.stats import norm
from scipy import stats
from google.colab import drive
drive.mount('/content/drive')

"""***Reading The Dataset***

"""

data = pd.read_csv('/content/drive/MyDrive/heart.csv')
#DataSet link : https://www.kaggle.com/datasets/rashikrahmanpritom/heart-attack-analysis-prediction-dataset

"""***Description Of Variables***

<div style="padding:0px; font-size:7px; border-radius: 10px;">
    <table style="width: 100%; background-color:#f0f8ff;">
        <tr>
            <th style="text-align:center;font-size:20px;"><b>Variable</b></th>
            <th style="text-align:center;font-size:20px;"><b>Description</b></th>
            <th style="text-align:center;font-size:20px;"><b>Data Type</b></th>
        </tr>
        <tr>
            <td style="text-align:center; color:#0f52ba;font-size:15px;"><strong>age</strong></td>
            <td style="text-align:center; color:#0f52ba;font-size:15px;">Age of the patient in years</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Numeric</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>sex</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Gender of the patient:<br>0: female<br>1: male</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Binary</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>cp</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Type of chest pain:<br>0: Typical angina<br>1: Atypical angina<br>2: Non-anginal pain<br>3: Asymptomatic</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Nominal</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>trtbps</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Resting blood pressure in mmHg</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Numeric</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>chol</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Serum cholesterol in mg/dl</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Numeric</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>fbs</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Fasting blood sugar level categorized as above 120 mg/dl:<br>0: false<br>1: true</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Binary</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>restecg</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Resting electrocardiographic results:<br>0: Normal<br>1: Having ST-T wave abnormality<br>2: Showing probable or definite left ventricular hypertrophy</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Nominal</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>thalachh</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Maximum heart rate achieved during a stress test</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Numeric</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>exng</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Exercise induced angina:<br>0: no<br>1: yes</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Binary</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>oldpeak</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">ST depression induced by exercise relative to rest(unit -> depression)</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Numeric</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>slp</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Slope of the peak exercise ST segment:<br>0: Upsloping<br>1: Flat<br>2: Downsloping</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Nominal</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>caa</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Number of major vessels (0-4) colored by fluoroscopy</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Numeric</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>thall</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Thalium stress test result:<br>0: Normal<br>1: Fixed defect<br>2: Reversible defect<br>3: Not described</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Nominal</td>
        </tr>
        <tr>
            <td style="text-align:center;color:#0f52ba;font-size:15px;"><strong>output</strong></td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Heart disease status:<br>0: no disease<br>1: presence of disease</td>
            <td style="text-align:center;color:#0f52ba;font-size:15px;">Binary</td>
        </tr>    
    </table>
</div>

***Renaming Variables***
"""

data.rename(columns={
    "age":"Age",
    "sex":"Sex",
    "cp":"ChestPain",
    "trtbps":"RestingBloodPressure",
    "chol":"Cholesterol",
    "fbs":"FastingBloodSugar",
    "restecg":"RestingECG",
    "thalachh":"MaxHeartRate",
    "exng":"ExcerciseAngina",
    "oldpeak":"OldPeak",
    "slp":"STSlope",
    "caa":"nMajorVessels",
    "thall":"Thalium",
}, inplace=True)

data.head()
data.tail()

"""***Checking the shape of DataFrame***"""

print('Number of rows are',data.shape[0], 'and number of columns are ',data.shape[1])

data.info()

data.describe().T

"""***Looking for Correlations***"""

correlation_matrix = data.corr()

# Sort the correlations with respect to the 'output' column
correlation_with_output = correlation_matrix['output'].sort_values(ascending=False)

# Get the 13 highest correlations (excluding the target itself)
top_13_correlations = correlation_with_output[1:14]  # Skip the first value (which is correlation of 'output' with itself)

# Plot the top 13 correlations
plt.figure(figsize=(10, 6))
sns.barplot(x=top_13_correlations.values, y=top_13_correlations.index, palette='viridis')
plt.title('Top 13 Feature Correlations with Target (output)')
plt.xlabel('Correlation Coefficient')
plt.ylabel('Features')
plt.show()

import plotly.express as px
px.imshow(data.corr(),title="Correlation Plot of the Heat Failure Prediction")

"""***Handling the Duplicates***"""

# Check for duplicate rows
duplicates = data.duplicated()

# Count the number of duplicate rows
num_duplicates = duplicates.sum()

# Print the result
print(f"Number of duplicate rows: {num_duplicates}")

# Display the result
data[data.duplicated()]

data2 = data.drop_duplicates()
data2

data2.index.is_unique

"""***Handling the Missing Values***"""

total = data2.isnull().sum().sort_values(ascending=False)
total_select = total.head(20)
total_select.plot(kind="bar", figsize = (8,6), fontsize = 10)

plt.xlabel("Columns", fontsize = 20)
plt.ylabel("Count", fontsize = 20)
plt.title("Total Missing Values", fontsize = 20)

"""No missing values as this previous plot shows

*** **bold text**Outliers***
"""

# Create a boxplot for all features except the 'output' column
plt.figure(figsize=(12, 6))
sns.boxplot(data=data2.drop(columns=['output']), palette="Set2")

# Set titles and labels
plt.title('Boxplot for Each Feature (Excluding Target)')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.ylabel('Values')

# Show the plot
plt.tight_layout()
plt.show()

data3 = data2.copy()

# Calculate the IQR for 'chol' and 'trtpbs'
Q1 = data3[['Cholesterol', 'RestingBloodPressure']].quantile(0.25)  # First quartile (25th percentile)
Q3 = data3[['Cholesterol', 'RestingBloodPressure']].quantile(0.75)  # Third quartile (75th percentile)
IQR = Q3 - Q1  # Interquartile range

# Define outlier limits
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Remove rows where 'chol' or 'trtpbs' have outliers
data3 = data3[~((data3['Cholesterol'] < lower_bound['Cholesterol']) | (data3['Cholesterol'] > upper_bound['Cholesterol']) |
                (data3['RestingBloodPressure'] < lower_bound['RestingBloodPressure']) | (data3['RestingBloodPressure'] > upper_bound['RestingBloodPressure']))]

plt.figure(figsize=(12, 6))
sns.boxplot(data=data3.drop(columns=['output']), palette="Set2")

# Set titles and labels
plt.title('Boxplot for Each Feature (Excluding Target)')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.ylabel('Values')

# Show the plot
plt.tight_layout()
plt.show()

print('Number of rows after removing outliers is : ',data3.shape[0])

"""***Features scaling***"""

# Import the MinMaxScaler from sklearn
from sklearn.preprocessing import MinMaxScaler

# Initialize the scaler
scaler = MinMaxScaler()

# Normalize the specified columns
data3[['Age', 'RestingBloodPressure', 'Cholesterol', 'MaxHeartRate']] = scaler.fit_transform(data3[['Age', 'RestingBloodPressure', 'Cholesterol', 'MaxHeartRate']])

"""# Exploratory Data Analysis

***Skewness and Kutosis***
"""

# Calculate skewness and kurtosis for each column
skewness = data3.skew()
kurtosis = data3.kurtosis()

# Create two subplots: one for skewness and one for kurtosis
fig, axs = plt.subplots(2, 1, figsize=(10, 10))

# Plot skewness
sns.barplot(x=skewness.index, y=skewness.values, ax=axs[0], palette='Blues_d')
axs[0].set_title('Skewness of Each Feature')
axs[0].set_ylabel('Skewness Value')
axs[0].set_xlabel('Features')
axs[0].tick_params(axis='x', rotation=90)  # Rotate x-axis labels for better readability

# Plot kurtosis
sns.barplot(x=kurtosis.index, y=kurtosis.values, ax=axs[1], palette='Reds_d')
axs[1].set_title('Kurtosis of Each Feature')
axs[1].set_ylabel('Kurtosis Value')
axs[1].set_xlabel('Features')
axs[1].tick_params(axis='x', rotation=90)

# Adjust layout
plt.tight_layout()
plt.show()

"""***Count plot of categorical features***"""

fig = plt.figure(figsize=(14,14))
gs = fig.add_gridspec(3,3)
gs.update(wspace=0.5, hspace=0.25)
ax0 = fig.add_subplot(gs[0,0])
ax1 = fig.add_subplot(gs[0,1])
ax2 = fig.add_subplot(gs[0,2])
ax3 = fig.add_subplot(gs[1,0])
ax4 = fig.add_subplot(gs[1,1])
ax5 = fig.add_subplot(gs[1,2])
ax6 = fig.add_subplot(gs[2,0])
ax7 = fig.add_subplot(gs[2,1])
ax8 = fig.add_subplot(gs[2,2])

background_color = "#ffe6e6"
color_palette = ["#800000","#8000ff","#6aac90","#5833ff","#da8829"]
fig.patch.set_facecolor(background_color)
ax0.set_facecolor(background_color)
ax1.set_facecolor(background_color)
ax2.set_facecolor(background_color)
ax3.set_facecolor(background_color)
ax4.set_facecolor(background_color)
ax5.set_facecolor(background_color)
ax6.set_facecolor(background_color)
ax7.set_facecolor(background_color)
ax8.set_facecolor(background_color)

# Title of the plot
ax0.spines["bottom"].set_visible(False)
ax0.spines["left"].set_visible(False)
ax0.spines["top"].set_visible(False)
ax0.spines["right"].set_visible(False)
ax0.tick_params(left=False, bottom=False)
ax0.set_xticklabels([])
ax0.set_yticklabels([])
ax0.text(0.5,0.5,
         'Count plot for various\n categorical features\n_________________',
         horizontalalignment='center',
         verticalalignment='center',
         fontsize=18, fontweight='bold',
         fontfamily='serif',
         color="#000000")

# Sex count
ax1.text(0.3, 220, 'Sex', fontsize=14, fontweight='bold', fontfamily='serif', color="#000000")
ax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))
sns.countplot(ax=ax1,data=data3,x='Sex',palette=color_palette)
ax1.set_xlabel("")
ax1.set_ylabel("")

# Exng (Excercise Angina) count
ax2.text(0.3, 220, 'Excercise Angina', fontsize=14, fontweight='bold', fontfamily='serif', color="#000000")
ax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))
sns.countplot(ax=ax2,data=data3,x='ExcerciseAngina',palette=color_palette)
ax2.set_xlabel("")
ax2.set_ylabel("")

# Caa (nMajorVessels) count
ax3.text(1.5, 200, 'nMajor Vessels', fontsize=14, fontweight='bold', fontfamily='serif', color="#000000")
ax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))
sns.countplot(ax=ax3,data=data3,x='nMajorVessels',palette=color_palette)
ax3.set_xlabel("")
ax3.set_ylabel("")

# Cp (ChestPain) count
ax4.text(1.5, 162, 'Chest Pain', fontsize=14, fontweight='bold', fontfamily='serif', color="#000000")
ax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))
sns.countplot(ax=ax4,data=data3,x='ChestPain',palette=color_palette)
ax4.set_xlabel("")
ax4.set_ylabel("")

# Fbs (FastingBloodSugar) count
ax5.text(0.5, 290, 'Fasting Blood Sugar', fontsize=14, fontweight='bold', fontfamily='serif', color="#000000")
ax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))
sns.countplot(ax=ax5,data=data3,x='FastingBloodSugar',palette=color_palette)
ax5.set_xlabel("")
ax5.set_ylabel("")

# Restecg (RestingECG) count
ax6.text(0.75, 165, 'Resting ECG', fontsize=14, fontweight='bold', fontfamily='serif', color="#000000")
ax6.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))
sns.countplot(ax=ax6,data=data3,x='RestingECG',palette=color_palette)
ax6.set_xlabel("")
ax6.set_ylabel("")

# Slp (STSlope) count
ax7.text(0.85, 155, 'ST Slope', fontsize=14, fontweight='bold', fontfamily='serif', color="#000000")
ax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))
sns.countplot(ax=ax7,data=data3,x='STSlope',palette=color_palette)
ax7.set_xlabel("")
ax7.set_ylabel("")

# Thall (Thalium) count
ax8.text(1.2, 180, 'Thalium', fontsize=14, fontweight='bold', fontfamily='serif', color="#000000")
ax8.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))
sns.countplot(ax=ax8,data=data3,x='Thalium',palette=color_palette)
ax8.set_xlabel("")
ax8.set_ylabel("")

# Remove spines from certain axes
for s in ["top","right","left"]:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)
    ax3.spines[s].set_visible(False)
    ax4.spines[s].set_visible(False)
    ax5.spines[s].set_visible(False)
    ax6.spines[s].set_visible(False)
    ax7.spines[s].set_visible(False)
    ax8.spines[s].set_visible(False)

"""***Count plot of target***"""

fig = plt.figure(figsize=(10,10))
gs = fig.add_gridspec(1,2)
gs.update(wspace=0.3, hspace=0.15)
ax0 = fig.add_subplot(gs[0,0])
ax1 = fig.add_subplot(gs[0,1])

background_color = "#ffe6e6"
color_palette = ["#800000","#8000ff","#6aac90","#5833ff","#da8829"]
fig.patch.set_facecolor(background_color)
ax0.set_facecolor(background_color)
ax1.set_facecolor(background_color)

# Title of the plot
ax0.text(0.5,0.5,"Count of the target\n",
        horizontalalignment = 'center',
        verticalalignment = 'center',
        fontsize = 18,
        fontweight='bold',
        fontfamily='serif',
        color='#000000')

ax0.set_xticklabels([])
ax0.set_yticklabels([])
ax0.tick_params(left=False, bottom=False)

# Target Count
ax1.text(0.35,177,"Output",fontsize=14, fontweight='bold', fontfamily='serif', color="#000000")
ax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))
sns.countplot(ax=ax1, data=data3, x = 'output',palette = color_palette)
ax1.set_xlabel("")
ax1.set_ylabel("")
ax1.set_xticklabels(["Low chance attack(0)","High chance attack(1)"])

ax0.spines["top"].set_visible(False)
ax0.spines["left"].set_visible(False)
ax0.spines["bottom"].set_visible(False)
ax0.spines["right"].set_visible(False)
ax1.spines["top"].set_visible(False)
ax1.spines["left"].set_visible(False)
ax1.spines["right"].set_visible(False)

"""***Applying Smote***"""

from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split

X = data3.drop(columns=['output'])  # All features except the target column 'output'
y = data3['output']  # Target column

# Split the dataset into training and testing sets
X_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply SMOTE to the training data only
smote = SMOTE(random_state=42)
x_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Convert the resampled target to a DataFrame for easier plotting
y_train_balanced_df = pd.DataFrame(y_train_balanced, columns=['output'])

# Plot the count of each class in the balanced dataset
plt.figure(figsize=(8, 6))
sns.countplot(data=y_train_balanced_df, x='output', palette='viridis')
plt.title("Class Distribution After SMOTE")
plt.xlabel("Output")
plt.ylabel("Count")
plt.show()

"""# KNN :

***Modeling***
"""

# Import required libraries
import numpy as np
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn import metrics

x_train_scaled = scaler.fit_transform(x_train_balanced)
x_test_scaled = scaler.transform(x_test)

# Use the elbow method to find the best value for K
error_rates = []

# Test K values from 1 to 15
for k in range(1, 15):
    model = KNeighborsClassifier(n_neighbors=k)
    model.fit(x_train_scaled, y_train_balanced)
    knn_predicted = model.predict(x_test_scaled)
    error = 1 - accuracy_score(y_test, knn_predicted)
    error_rates.append(error)

# Plot the elbow curve
plt.figure(figsize=(10, 6))
plt.plot(range(1, 15), error_rates, marker='o', linestyle='--')
plt.title('Error Rate vs K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')
plt.show()

Ks = 17
mean_acc = np.zeros((Ks-1))
std_acc = np.zeros((Ks-1))

for n in range(1, Ks):
    # Train Model and Predict
    neigh = KNeighborsClassifier(n_neighbors=n).fit(x_train_scaled, y_train_balanced)
    yhat = neigh.predict(x_test_scaled)
    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)
    std_acc[n-1] = np.std(yhat == y_test) / np.sqrt(yhat.shape[0])

# Print the mean accuracy for each K
print("Mean Accuracy for each K value:")
print(mean_acc)

# Based on the elbow plot, choose the optimal K
optimal_k = error_rates.index(min(error_rates)) + 1
print(f"The optimal K value is: {optimal_k}")

# Apply KNN with the optimal K
model = KNeighborsClassifier(n_neighbors=optimal_k)
model.fit(x_train_scaled, y_train_balanced)
knn_predicted = model.predict(x_test_scaled)

"""***Evaluation***"""

# Evaluate the model's performance
accuracy_knn = accuracy_score(y_test, knn_predicted)
print(f"Accuracy with K={optimal_k}: {accuracy_knn*100} %")
print("Confusion Matrix:\n", confusion_matrix(y_test, knn_predicted))
print("Classification Report:\n", classification_report(y_test, knn_predicted))

"""# SVM :

***Modeling***
"""

# Import the required libraries
from sklearn.svm import SVC  # Import SVC for Support Vector Machine
from sklearn.metrics import accuracy_score

# Initialize and train the SVM model (default : RBF)
model = SVC()
model.fit(x_train_scaled, y_train_balanced)

# Make predictions on the test set
svm_predicted = model.predict(x_test_scaled)

"""***Evaluation***"""

# Evaluate the model's performance
print("Accuracy:", accuracy_score(y_test, svm_predicted)*100, "%")
print("Confusion Matrix:\n", confusion_matrix(y_test, svm_predicted))
print("Classification Report:\n", classification_report(y_test, svm_predicted))

"""# Decision Tree :

***Modeling***
"""

from sklearn.tree import DecisionTreeClassifier

# Create a decision tree model
clf = DecisionTreeClassifier(criterion='gini')
clf.fit(x_train_scaled, y_train_balanced)

# Make predictions
tree_pred = clf.predict(x_test_scaled)

"""***Evaluation***"""

# Evaluate the model's performance
print("Accuracy:", accuracy_score(y_test, tree_pred)*100, "%")
print("Confusion Matrix:\n", confusion_matrix(y_test, tree_pred))
print("Classification Report:\n", classification_report(y_test, tree_pred))

# Decision tree visualization
from sklearn import tree
import matplotlib.pyplot as plt

plt.figure(figsize=(20,10))
tree.plot_tree(clf,
               filled=True,
               feature_names=X.columns,
               class_names=['No Disease', 'Disease'],
               rounded=True,
               max_depth=3)

plt.show()

"""#XGBOOST

***Modeling***
"""

import xgboost as xgb
model = xgb.XGBClassifier(
    learning_rate=0.1,
    n_estimators=100,
    max_depth=3,
    min_child_weight=1,
    gamma=0,
    subsample=0.8,
    colsample_bytree=0.8,
    objective='binary:logistic',
    scale_pos_weight=1,
    random_state=42
)
model.fit(x_train_scaled, y_train_balanced)
y_pred = model.predict(x_test_scaled)

"""***Evaluation***"""

# Evaluate the model's performance
print("Accuracy:", accuracy_score(y_test, y_pred)*100, "%")
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))