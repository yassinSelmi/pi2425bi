# -*- coding: utf-8 -*-
"""Brain-Stroke.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fK9gqTCpIW9YOVa8r7ZG5vNa11rh01pK

<a id="1"></a>
# <div style="text-align:center; border-radius:15px 50px; padding:5px; color:white; margin:0; font-size:100%; font-family:Pacifico; background-color:#28a745; overflow:hidden"><b> Import Libraries üìö </b></div>
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import warnings
warnings.filterwarnings('ignore')

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.metrics import classification_report , confusion_matrix , accuracy_score
from sklearn.model_selection import train_test_split

import cv2
#from google.colab.patches import cv2_imshow
from PIL import Image
import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Input, Dense,Conv2D , MaxPooling2D, Flatten,BatchNormalization,Dropout
from tensorflow.keras.preprocessing import image_dataset_from_directory
import tensorflow_hub as hub

from tensorflow.keras.preprocessing import image

print("‚úÖ TensorFlow version utilis√©e pour l'entra√Ænement :", tf.__version__)

import keras
print("‚úÖ Keras version utilis√©e pour l'entra√Ænement :", keras.__version__)

"""<a id="1"></a>
# <div style="text-align:center; border-radius:15px 50px; padding:5px; color:white; margin:0; font-size:100%; font-family:Pacifico; background-color:#28a745; overflow:hidden"><b> Load data ‚úÖ </b></div>
"""

normal_path = "/content/drive/MyDrive/Brain_Stroke/Dataset/Normal"
stroke_path = "/content/drive/MyDrive/Brain_Stroke/Dataset/Stroke"

normal_folder = os.listdir(normal_path)
stroke_folder = os.listdir(stroke_path)

print("Images in Normal Data:",len(normal_folder))
print("Images in Stroke Data:",len(stroke_folder))

"""## Image Data Preprocessing"""

# Every image have different size so we have to do resize of each image
# Standarizing the data
# but we have to mixed all the images to make a single data

# IMAGE PROCESSING
# Resize the Images

# Convert the images to numpy arrays

normal_path = "/content/drive/MyDrive/Brain_Stroke/Dataset/Normal"
stroke_path = "/content/drive/MyDrive/Brain_Stroke/Dataset/Stroke"

data = []

for img_file in normal_folder:
    image = Image.open("/content/drive/MyDrive/Brain_Stroke/Dataset/Normal/" + img_file)
    image = image.resize((224,224))
    image = image.convert('RGB')
    image = np.array(image)
    data.append(image)

for img_file in stroke_folder:
    image = Image.open("/content/drive/MyDrive/Brain_Stroke/Dataset/Stroke/" + img_file)
    image = image.resize((224,224))
    image = image.convert('RGB')
    image = np.array(image)
    data.append(image)

len(data)

data[0].shape

data[0]

"""## Class Labels"""

normal_label = [0]*len(normal_folder)
stroke_label = [1]*len(stroke_folder)

Target_label = normal_label + stroke_label

len(Target_label)

"""## Convert Image data and target labels into array"""

x = np.array(data)
y = np.array(Target_label)

x[0]

y

"""## Split The Data for training and testing purpose"""

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.10,shuffle=True)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

"""## Scale The Data"""

x_train_s = x_train/255
x_test_s = x_test/255

"""## Image Data Visualization"""

class_labels = ["Normal","Stroke"]
plt.figure(figsize=(16,24))
for i in range(24):
    plt.subplot(6,4,i+1)
    plt.imshow(x_train[i])
    plt.title(f"Actual Label:{class_labels[y_train[i]]}")
    plt.axis("off")

"""<a id="1"></a>
# <div style="text-align:center; border-radius:15px 50px; padding:5px; color:white; margin:0; font-size:100%; font-family:Pacifico; background-color:#28a745; overflow:hidden"><b> Build Model Using CNN üéØ </b></div>
"""

model = Sequential()

model.add(Conv2D(filters=100,kernel_size=(3,3),strides=(1,1),padding="valid",activation="relu", input_shape=(224,224,3)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(filters=80,kernel_size=(3,3),strides=(1,1),padding="valid",activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(filters=64,kernel_size=(3,3),strides=(1,1),padding="valid",activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(units=500, activation="relu"))
model.add(Dropout(0.2))
model.add(Dense(units=500, activation="relu"))
model.add(Dropout(0.2))
model.add(Dense(units=1, activation="sigmoid"))

model.compile(optimizer="adam",loss="binary_crossentropy",
             metrics=["accuracy"])

model.summary()

history = model.fit(x_train_s,y_train,batch_size=32,
         epochs=10, validation_data=(x_test_s,y_test))

"""<a id="1"></a>
# <div style="text-align:center; border-radius:15px 50px; padding:5px; color:white; margin:0; font-size:100%; font-family:Pacifico; background-color:#28a745; overflow:hidden"><b> Model Evaluation on Test and Train Data </b></div>
"""

loss, acc = model.evaluate(x_test_s,y_test)
print("Loss on Test Data:",loss)
print("Accuracy on Test Data:",acc)

loss, acc = model.evaluate(x_train_s,y_train)
print("Loss on Train Data:",loss)
print("Accuracy on Train Data:",acc)

"""## Predictions on Test Image Data"""

y_pred_test = model.predict(x_test_s)
y_pred_test_label = [1 if i>=0.5 else 0 for i in y_pred_test]

print("Actual Label:",y_test[:10])
print("Predicted Label:",y_pred_test_label[:10])

"""## Metrics Evaluation On Test Data"""

print("-----Metrics Evaluation On Test Data -----")
print()
print("Confusion Matrix:\n",confusion_matrix(y_test,y_pred_test_label))
print()
print("Classification Report:\n",classification_report(y_test,y_pred_test_label))

"""## ROC - Curve"""

from sklearn.metrics import roc_curve, precision_recall_curve, auc

y_prob = model.predict(x_test_s)

fpr, tpr, threshold = roc_curve(y_test, y_prob)

# Compute ROC curve and ROC area
roc_auc = auc(fpr, tpr)
print(f"ROC - Area :{roc_auc}")

# Plot ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()

"""## PR Curve"""

y_prob = model.predict(x_test_s)

precision, recall, threshold = precision_recall_curve(y_test, y_prob)

# Compute ROC curve and ROC area
pr_auc = auc(recall,precision)
print(f"PR - Area :{pr_auc}")

# Plot Precision-Recall curve
plt.figure(figsize=(8, 6))
plt.step(recall, precision, color='b', where='post', label=f'PR curve (AUC = {pr_auc:.2f})')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.title('Precision-Recall (PR) Curve')
plt.legend(loc='upper right')
plt.show()

"""## Image Predictions on Test Data"""

class_labels = ["Normal","Stroke"]
plt.figure(figsize=(16,32))
for i in range(30):
    plt.subplot(8,4,i+1)
    plt.imshow(x_test[i])
    plt.title(f"Actual:{class_labels[y_test[i]]}\nPredicted:{class_labels[y_pred_test_label[i]]}")
    plt.axis("off")

"""<a id="1"></a>
# <div style="text-align:center; border-radius:15px 50px; padding:5px; color:white; margin:0; font-size:100%; font-family:Pacifico; background-color:#28a745; overflow:hidden"><b> Save Model ‚úÖ </b></div>
"""

model.save("/content/drive/MyDrive/CNN.keras")

"""
# <div style="text-align:center; border-radius:15px 50px; padding:5px; color:white; margin:0; font-size:100%; font-family:Pacifico; background-color:#28a745; overflow:hidden"><b> Make Prediction üéØ </b></div>"""

img_path = "/content/drive/MyDrive/Brain Stroke/Brain_Stroke/Test/Stroke/58 (12).jpg"

img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array /= 255.0

model = keras.models.load_model('/content/drive/MyDrive/Brain Stroke/CNN.keras')

prediction = model.predict(img_array)

plt.imshow(img)
plt.axis('off')

if prediction[0][0] > 0.5:
    plt.title("‚ö†Ô∏è La pr√©diction indique un AVC !", fontsize=14)
else:
    plt.title("La pr√©diction indique une condition normale", fontsize=14)

plt.show()

model.save("Brain.h5")

"""
# <div style="text-align:center; border-radius:15px 50px; padding:5px; color:white; margin:0; font-size:100%; font-family:Pacifico; background-color:#28a745; overflow:hidden"><b> Maps API </b></div>"""

#pip install geopy requests folium
import requests
import json
from geopy.geocoders import Nominatim

def get_lat_lon_osm(address):
    geolocator = Nominatim(user_agent="my_unique_application")
    location = geolocator.geocode(address)
    return location.latitude, location.longitude

def find_nearby_hospitals_osm(lat, lon, radius=10000):
    overpass_url = "http://overpass-api.de/api/interpreter"

    query = f"""
    [out:json];
    (
      node["amenity"="hospital"](around:{radius},{lat},{lon});
      node["amenity"="clinic"](around:{radius},{lat},{lon});
    );
    out;
    """

    response = requests.get(overpass_url, params={'data': query})
    data = response.json()

    hospitals = []
    for element in data.get('elements', []):
        name = element.get('tags', {}).get('name', 'H√¥pital inconnu')
        hospitals.append({
            'name': name,
            'lat': element['lat'],
            'lon': element['lon']
        })

    return hospitals

adresse = "Tunis, Tunisie"
lat, lon = get_lat_lon_osm(adresse)
hospitals = find_nearby_hospitals_osm(lat, lon)

print("\nüè• H√¥pitaux et Cliniques les plus proches :")
for i, hospital in enumerate(hospitals[:3]):
    print(f"{i+1}. {hospital['name']}")

from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt

img_path = "/content/drive/MyDrive/Brain_Stroke/Test/Normal/100 (14).jpg"

img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array /= 255.0

model = keras.models.load_model('/content/drive/MyDrive/CNN.keras')

prediction = model.predict(img_array)

plt.imshow(img)
plt.axis('off')
plt.show()

if prediction[0][0] > 0.5:
    print("\n‚ö†Ô∏è La pr√©diction indique un AVC ! Recherche des h√¥pitaux les plus proches...\n")

    adresse = "Sokra, Tunisie"
    lat, lon = get_lat_lon_osm(adresse)

    hospitals = find_nearby_hospitals_osm(lat, lon)

    print("\nüè• H√¥pitaux et Cliniques les plus proches :")
    for i, hospital in enumerate(hospitals[:3]):
        print(f"{i+1}. {hospital['name']}")

else:
    print("\n‚úÖ La pr√©diction indique une condition normale.")